/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.icytv.scribble;

import static io.vertx.junit5.web.TestRequest.statusCode;
import static io.vertx.junit5.web.TestRequest.testRequest;
// entry point for all assertThat methods and utility methods (e.g. entry)
import static org.assertj.core.api.Assertions.assertThat;

import java.io.File;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import de.icytv.scribble.http.HTTPServer;
import io.vertx.core.Vertx;
import io.vertx.core.http.HttpMethod;
import io.vertx.ext.web.client.WebClient;
import io.vertx.ext.web.client.WebClientOptions;
import io.vertx.junit5.Checkpoint;
import io.vertx.junit5.VertxExtension;
import io.vertx.junit5.VertxTestContext;
import io.vertx.junit5.web.VertxWebClientExtension;
import io.vertx.junit5.web.WebClientOptionsInject;

@ExtendWith({ VertxExtension.class, VertxWebClientExtension.class })
@DisplayName("HTTP Server test suite")
public class HTTPTest {

	public static int PORT = 8080;

	@WebClientOptionsInject
	public WebClientOptions opts = new WebClientOptions().setDefaultPort(PORT);

	@BeforeEach
	@DisplayName("Deploy http Server")
	public void start(Vertx vertx, VertxTestContext testContext) throws Throwable {
		vertx.deployVerticle(new HTTPServer(PORT), testContext.completing());
	}

	@Test
	@DisplayName("serving files")
	public void servingIndex(WebClient client, VertxTestContext testContext) {
		testRequest(client, HttpMethod.GET, "/index.html").expect(statusCode(200)).send(testContext);
	}

	@Test
	@DisplayName("Check if server is correctly serving all .html files")
	public void servingAllFiles(WebClient client, VertxTestContext testContext) {
		File staticFolder = new File("static");
		File[] staticFiles = staticFolder.listFiles((dir, name) -> name.toLowerCase().endsWith(".html"));
		Checkpoint start = testContext.checkpoint(staticFiles.length);
		for(File f: staticFiles) {
			start.flag();
			testRequest(client, HttpMethod.GET, f.toString()).expect(statusCode(200)).send(testContext);
		}
	}

	@AfterEach
	@DisplayName("Verticle still up?")
	public void lastChecks(Vertx vertx) {
		assertThat(vertx.deploymentIDs()).isNotEmpty().hasSize(1);
	}

}
